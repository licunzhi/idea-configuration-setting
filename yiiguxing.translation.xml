<application>
  <component name="AppStorage">
    <histories>
      <item value="We don't use a fast path as with get()" />
      <item value="Executes task r in the caller's thread, unless the executor * has been shut down, in which case the task is discarded." />
      <item value="Caller Runs Policy" />
      <item value="deprecate" />
      <item value="Mutable Property Sources" />
      <item value="Assuming" />
      <item value="Note that certain shell environments such as Bash disallow the use of the period" />
      <item value="delimited" />
      <item value="comma" />
      <item value="System property that instructs Spring to ignore system environment variables, i.e. to never attempt to retrieve such a variable via System.getenv(). The default is &quot;false&quot;, falling back to system environment variable checks if a Spring environment property (e.g. a placeholder in a configuration String) isn't resolvable otherwise. Consider switching this flag to &quot;true&quot; if you experience log warnings from getenv calls coming from Spring, e.g. on WebSphere with strict SecurityManager settings and AccessControlExceptions warnings." />
      <item value="underlying source." />
      <item value="underlying" />
      <item value="against" />
      <item value="resolving" />
      <item value="Interface for resolving properties against any underlying source." />
      <item value="Alternatively, call refresh manually after further configuring the context." />
      <item value="loading the definitions from the given XML files." />
      <item value="definitions" />
      <item value="classify" />
      <item value="as" />
      <item value="reg id" />
      <item value="七樱" />
      <item value="lettuce" />
      <item value="EUREKA 02" />
      <item value="EUREKA 03" />
      <item value="preservation" />
      <item value="识别" />
      <item value="综合定位" />
      <item value="radix" />
      <item value="a f_reg custsrc day h" />
      <item value="security area info" />
      <item value="人脸识别" />
      <item value="Grid Bag Layout" />
      <item value="尺寸" />
      <item value="sakura" />
      <item value="Parallel Scavenge" />
      <item value="msidsn" />
      <item value="balance" />
      <item value="rotate Right" />
      <item value="balance Insertion" />
      <item value="Delegated" />
      <item value="Creates a thread pool that maintains enough threads to support * the given parallelism level, and may use multiple queues to * reduce contention. The parallelism level corresponds to the * maximum number of threads actively engaged in, or available to * engage in, task processing. The actual number of threads may * grow and shrink dynamically. A work-stealing pool makes no * guarantees about the order in which submitted tasks are * executed." />
      <item value="new Work Stealing Pool" />
      <item value="treeify" />
      <item value="replacement Tree Node" />
      <item value="possibly remove eldest" />
      <item value="creation mode." />
      <item value="creation" />
      <item value="* Provides a framework for implementing blocking locks and related * synchronizers (semaphores, events, etc) that rely on * first-in-first-out (FIFO) wait queues. This class is designed to * be a useful basis for most kinds of synchronizers that rely on a * single atomic {@code int} value to represent state. Subclasses * must define the protected methods that change this state, and which * define what that state means in terms of this object being acquired * or released. Given these, the other methods in this class carry * out all queuing and blocking mechanics. Subclasses can maintain * other state fields, but only the atomically updated {@code int} * value manipulated using methods {@link #getState}, {@link * #setState} and {@link #compareAndSetState} is tracked with respect * to synchronization." />
      <item value="Java VisualVM enables you to take snapshots that capture application data at the time the snapshot is taken. You can save snapshots to your local system and then examine them later or send them to others.  Java VisualVM enables you to take the following types of snapshots:  Profiler snapshots. A profiler snapshot captures the profiling data at the moment the snapshot is takes. The snapshot is either a memory snapshot or a CPU snapshot. You can take a profiler snapshot only when you are profiling an application. Application snapshots. An application snapshot is an archive that contains all the heap dumps, thread dumps and snapshots that are listed below the application node." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="140" />
        <entry key="ENGLISH" value="141" />
        <entry key="CHINESE_TRADITIONAL" value="2" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>